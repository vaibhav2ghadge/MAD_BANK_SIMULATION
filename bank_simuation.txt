Data Structure := Queue for channel avialble cashier 

	type Bank_Branch struct {
		customer int
		cashier chan int
	}
	type Bank struct {
		Branch Bank_Branch
		repository
}
type write interface {
	Service_Customer(int,Sync.WaitGroup)
}
type repository interface {
	write
}
Function := 

	func (Bank *b)Service_Customer(cid int,sync.Waitgroup wg) { 
		//get Avilabe cashier from Queue if avilabe else it wait to cashier free ie buffered channel are blocked
		cashier_id := <-b.Branch.cashier
		fmt.Println(time.New(),"cashier ",cashier_id,": customer ",cid,"started")
		
		//do the bank work sleep for 3 second
			time.sleep(time.Second*arg[time_per_customer])
		//now cashier avaiable for next customer push to queue

		b.Branch.cashier_id<-cashier_id
		fmt.Println(time.New(),"cashier ",cashier_id,": customer ",cid,"completed")
	wg.Done(1)
	}
	main() {
		//create object of bank
		wg := sync.WaitGroup
		
		bank := Bank{Branch.customer:arg[numCustomers],Branch.cashier:make(chan int,arg[numCashiers])}
		//push all available cashier to queue ie they are free
		for i:= 1 ;i<=cap(cashier);i++ {
			bank.Branch.cashier<-i
		}
		for i:=1;i<=bank.Branch.customer;i++ {
			wg.Add(1)
			go bank.service_customer(i,&wg)
		}
		wg.Wait()

}
